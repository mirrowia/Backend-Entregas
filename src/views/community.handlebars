<!DOCTYPE html>
<html lang="en">
<head>
    <title>Comunidad</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" />
    <style>
        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
            margin: 0;
        }

        #chat-container {
            display: flex;
            flex: 1;
        }

        #users {
            flex: 1;
            padding: 20px;
            background-color: #f2f2f2;
        }

        #messages {
            flex: 2;
            padding: 20px;
            overflow-y: auto;
        }

        #message-form {
            padding: 20px;
            background-color: #f2f2f2;
            display: flex;
            align-items: center;
        }

        #message-input {
            flex: 1;
            margin-right: 10px;
        }
    </style>
</head>

<body>
    <!-- Barra superior -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <h1 class="navbar-brand fs-3 p-0">Comunidad</h1>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item d-flex align-items-center">
                    <a class="nav-link d-flex p-0 fs-5 align-items-center" href="/shop/sessions/profile"><i class="bi bi-person-circle ms-3"></i></a>
                    {{#unless (eq rol "admin")}}
                    <a class="nav-link d-flex fs-5" href="/shop/community/chat">
                        <i class="bi bi-people-fill ms-3"></i>
                    </a>
                    <a class="nav-link d-flex fs-5" href="/shop/carts/{{cart}}">
                        <i class="bi bi-cart-fill ms-3"></i>
                    </a>
                    {{/unless}}
                </li>
            </ul>
        </div>
    </nav>
    <div id="chat-container" class="container-fluid">
        <div id="users" class="bg-light p-4">
            <h2>Usuarios Conectados</h2>
            <ul id="user-list" class="list-unstyled"></ul>
        </div>
        <div id="messages" class="bg-white p-4">
            <h2>Chat</h2>
            <ul class="list-unstyled">
                {{#each messages}}
                <li>{{this}}</li>
                {{/each}}
            </ul>
        </div>
    </div>
    <div id="message-form" class="container-fluid bg-light p-4">
        <div class="input-group">
            <input type="text" id="message-input" class="form-control" autocomplete="off" placeholder="Escribe tu mensaje..." />
            <div class="input-group-append">
                <button type="button" id="send-button" class="btn btn-primary">Enviar</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
    <script>
        // Conectar al servidor de Socket.IO
        const socket = io('https://mirrowia-nodejs-project.vercel.app/'); // Reemplaza con la URL correcta de tu servidor

        const userList = document.getElementById('user-list');

        document.addEventListener('DOMContentLoaded', () => {
            const messageInput = document.getElementById('message-input');
            const sendButton = document.getElementById('send-button');

            // Manejar clic en el botón de enviar
            sendButton.addEventListener('click', () => {
                const message = messageInput.value.trim();
                if (message) {
                    // Enviar el nombre del usuario y el mensaje al servidor a través de Socket.io
                    socket.emit('chat message', { message: message });
                    // Limpiar el campo de entrada después de enviar el mensaje
                    messageInput.value = '';
                }
            });

            socket.on('chat message', (data) => {
                // Agregar el nombre del usuario y el mensaje al chat
                const messagesList = document.getElementById('messages');
                const messageItem = document.createElement('li');
                
                // Crear un elemento de span para el nombre de usuario con el color especificado
                const userSpan = document.createElement('span');
                userSpan.style.color = data.chat_color; // Establecer el color del texto del nombre de usuario
                userSpan.textContent = `${data.user}: `; // Agregar el nombre del usuario al mensaje
                messageItem.appendChild(userSpan);
                
                // Agregar el mensaje al elemento de lista
                const messageSpan = document.createElement('span');
                messageSpan.textContent = data.message;
                messageItem.appendChild(messageSpan);
                
                // Agregar el mensaje completo al chat
                messagesList.appendChild(messageItem);
            });

            // Manejar eventos de usuarios conectados
            socket.on('users connected', (users) => {
                // Limpiar la lista de usuarios antes de actualizarla
                userList.innerHTML = '';

                // Recorrer la lista de usuarios y agregar cada usuario a la lista
                users.forEach(user => {
                    const listItem = document.createElement('li');
                    listItem.textContent = user.email;
                    userList.appendChild(listItem);
                });
            });
        });
    </script>
</body>
</html>
