<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Detalles del Producto</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <style>
    /* Fondo degradado de gris azulado */
    body {
      background: linear-gradient(to bottom, #E6ECF3 0%, #C1D0E3 100%);
      min-height: 100vh;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .product-details {
      margin: 5vh auto;
      padding: 20px;
      width: 30vw;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
    }

    #productDescription {
      height: 10vh;
    }

    .product-image {
      max-width: 100%;
      height: auto;
    }

    .action-btn {
      display: inline-block;
      margin-right: 10px;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
    }

    .save-btn {
      background-color: #5cb85c;
      color: #ffffff;
    }

    .cancel-btn {
      background-color: #d9534f;
      color: #ffffff;
    }
  </style>
</head>

<body>
  <div class="product-details">
    <div class="product-info">
      <p><strong>ID:</strong> {{payload._doc._id}}</p>
      <p><strong>Titulo:</strong> <input type="text" id="productName" value="{{payload._doc.name}}"
          class="form-control mb-2" placeholder="Nombre del Producto"></p>
      <p><strong>Descripción:</strong> <textarea id="productDescription" class="form-control mb-2"
          placeholder="Descripción">{{payload._doc.description}}</textarea></p>
      <p><strong>Categoría:</strong> <input type="text" id="productCategory" value="{{payload._doc.category}}"
          class="form-control mb-2" placeholder="Categoría"></p>
      <p><strong>Stock:</strong> <input type="number" id="productStock" value="{{payload._doc.stock}}"
          class="form-control mb-2" placeholder="Stock"></p>
      <p><strong>Precio:</strong> <input type="number" id="productPrice" value="{{payload._doc.price}}"
          class="form-control mb-2" placeholder="Precio"></p>
    </div>
    <div class="product-image-container d-flex flex-column">
      <img id="productImage" src="{{payload._doc.image_url}}" alt="{{payload._doc.name}}" class="product-image" />
      <button class="btn btn-primary w-100 mt-3" onclick="changeProductImage('{{payload._doc._id}}')">Subir Imagen</button>
      <div class="d-flex justify-content-between w-100 mt-3">
        <button type="button" class="action-btn save-btn w-100 m-0 me-2" onclick="saveChanges('{{payload._doc._id}}')">
          Guardar
        </button>
        <button type="button" class="action-btn cancel-btn w-100 m-0 ms-2" onclick="goBack()">
          Cancelar
        </button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script>

    //Subir imagen
    function changeProductImage(pid) {
        Swal.fire({
          title: 'Subir nueva imagen del producto',
          input: 'file',
          inputAttributes: {
            accept: 'image/*',
            'aria-label': 'Sube tu imagen',
            name: 'product_image',
          },
          showCancelButton: true,
          confirmButtonText: 'Guardar',
          cancelButtonText: 'Cancelar',
          showLoaderOnConfirm: true,
          preConfirm: (file) => {
            return new Promise((resolve) => {
              const formData = new FormData();
              formData.append('product_image', file);

              fetch(`/api/products/${pid}/image`, {
                method: 'POST',
                body: formData,
              })
                .then(response => {
                  if (response.ok) {
                    resolve();
                  } else {
                    throw new Error('Error al subir la imagen');
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.showValidationMessage('Error al subir la imagen');
                });
            });
          },
          allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {
          if (result.isConfirmed) {
            Swal.fire('¡Imagen subida con éxito!', '', 'success').then(() => {
              window.location.reload();
            });
          }
        });
      }

    //Guardar los datos
    function saveChanges(productId) {
      var productName = document.getElementById("productName").value;
      var productDescription = document.getElementById("productDescription").value;
      var productCategory = document.getElementById("productCategory").value;
      var productStock = document.getElementById("productStock").value;
      var productPrice = document.getElementById("productPrice").value;
      var productImageUrl = document.getElementById("productImageUrl").value;

      var product = {
        name: productName,
        description: productDescription,
        category: productCategory,
        stock: parseInt(productStock),
        price: parseFloat(productPrice),
        image_url: productImageUrl
      };

      fetch(`/api/products/${productId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(product)
      })
        .then(response => response.json())
        .then(data => {
          console.log('Producto guardado:', data);
          Toastify({
            text: "Producto actualizado, regresando a la pagina anterior",
            duration: 3000,
            newWindow: true,
            gravity: "bottom",
            position: "right",
            style: {
              background: "linear-gradient(to right, #00b09b, #96c93d)",
            }
          }).showToast();
          setTimeout(function () {
            goBack();
          }, 2000); // 3000 milisegundos = 3 segundos
        })
        .catch(error => {
          Toastify({
            text: "Internal Server Error",
            duration: 3000,
            close: true,
            gravity: "bottom",
            position: "right",
          }).showToast();
          console.error('Error:', error);
        });

    }

    //Regresar
    function goBack() {
      window.history.back();
    }
  </script>

</body>

</html>